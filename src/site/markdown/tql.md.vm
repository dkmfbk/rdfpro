
TQL Library
===========

Turtle Quads (TQL) is a line-oriented RDF format similar to NQuads but using the more permissive (and efficient!) Turtle encoding for characters.
It has been introduced by [DBpedia](http://wiki.dbpedia.org/Internationalization/Guide) for its dump files and it is supported in input by the Virtuoso triple store. TQL is the preferred format for manipulating RDF data in RDFpro.

The `rdfpro-tql` module extends RDF4J RIO with support for the TQL format. In order to use it you have to include the following dependency in your `pom.xml`:

    <dependency>
      <groupId>eu.fbk.rdfpro</groupId>
      <artifactId>rdfpro-tql</artifactId>
      <version>${project-version}</version>
    </dependency>

If you don't use Maven, you have to download and include the following JARs in the classpath:

  * [rdfpro-tql-${project-version}.jar](http://central.maven.org/maven2/eu/fbk/rdfpro/rdfpro-jsonld/${project-version}/rdfpro-tql-${project-version}.jar)
  * [slf4j-api-${slf4j-version}.jar](http://central.maven.org/maven2/org/slf4j/slf4j-api/${slf4j-version}/slf4j-api-${slf4j-version}.jar) (or newer version)
  * [guava-${guava-version}.jar](http://central.maven.org/maven2/com/google/guava/guava/${guava-version}/guava-${guava-version}.jar) (or newer version)
  * [rdf4j-rio-api-${rdf4j-version}.jar](http://central.maven.org/maven2/org/eclipse/rdf4j/rdf4j-rio-api/${rdf4j-version}/rdf4j-rio-api-${rdf4j-version}.jar) (or newer version)
  * [rdf4j-model-${rdf4j-version}.jar](http://central.maven.org/maven2/org/eclipse/rdf4j/rdf4j-model/${rdf4j-version}/rdf4j-model-${rdf4j-version}.jar) (or newer version)
  * [rdf4j-util-${rdf4j-version}.jar](http://central.maven.org/maven2/org/eclipse/rdf4j/rdf4j-util/${rdf4j-version}/rdf4j-util-${rdf4j-version}.jar) (or newer version)

Note that the abovementioned RDF4J JARs are not necessary in case the [eclipse-rdf4j-${rdf4j-version}-onejar.jar](http://www.eclipse.org/downloads/download.php?file=/rdf4j/eclipse-rdf4j-${rdf4j-version}-onejar.jar) file is already included. The SLF4J API is used by RDF4J and RDFpro for logging. You need to include also an implementation (e.g., [Logback](http://logback.qos.ch/)) for logging to work.

Constant [`TQL.FORMAT`](apidocs/eu/fbk/rdfpro/tql/TQL.html#FORMAT) can be used to refer to the TQL format, e.g., when creating a parser or writer, as TQL is not part of the predefined set of RDF4J [`RDFFormat`s](http://docs.rdf4j.org/javadoc/latest/org/eclipse/rdf4j/rio/RDFFormat.html). Differently from the past, it is no more necessary to register the TQL format, as its supporting classes are automatically detected and loaded by RDF4J via the Java [ServiceLoader](https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html) mechanism. 

A note on performance. The TQL parser and writer operate by reading / writing a character at a time, relying on the underlying stream for proper buffering. For optimal performances, make sure to use them with a [`BufferedReader`](http://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html) or [`BufferedWriter`](http://docs.oracle.com/javase/8/docs/api/java/io/BufferedWriter.html), or, better, with their corresponding unsynchronized variants produced by methods `IO.buffer()` of the [`IO`](apidocs/eu/fbk/rdfpro/util/IO.html) utility class.
